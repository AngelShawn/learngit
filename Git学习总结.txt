                                    CASE 1 Git简介

一.Git的诞生
1.Git是一个分布式版本控制系统
2.目的：需要一个软件的自动记录每次文件的改动并且可以让同事之间协作编辑
3.起源：Linus本人为了方便使用，自己用C语言两周完成开发。

二.Git的集中式和分布式
1.集中式：（屏蔽的CVS和SVN就是集中式的版本控制系统）
他的版本库存放在中央服务器，干活的时候用自己的电脑从中央服务器取到最新的版本，在干完活之后推回给中央服务器。
缺点：必须要联网才可以工作效率太慢
2.分布式：
没有中央服务器，每个人的电脑都是一个完整的版本库工作的时候不需要联网。

从整体上来说集中式版本安全性高。集中式和分布式的区别是：你的本地是否有完整的版本库历史


                                    CASE 2 安装Git

在安装完Git之后创建个文件夹（比如：本地仓），在界面右键“Git->GitBush”
1.用git-version查看版本
2.输入姓名和邮箱


                                    CASE 3 创建版本库
1.廖方法（不在一开始自己创建文件夹）
  mkdir learngit
  cd learngit
  pwd(用于显示当前目录)
2.git init 把目录变成git可以管理仓库（不要对其进行任何的删改）
3.如何把txt文件和版本库联系起来
 单纯建造txt文件和版本库没有任何联系，而且不建议用Windows自带的来编写，所以下载vscode
 一定要将文件放入本地仓中才可以联系起来
 之后将文件放入Git仓库中也就是用git add和git commit -m"balbala"进行说明
 返回的1 file changed代表有一个文件被改动 2insertions代表插入了两行内容
 add可以一次提交多个文件比如git add file2.txt file3.txt
 而commit一次就可以提交很多文件


                                    CASE 4 版本回退
1.要随时掌握工作区的状态，使用git status命令。
2.如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
3.其实对于文件的修改可以理解为通过不断地对文件修改不断提交版本库中相当于打怪时每过一个关卡就进行一次存档 
4.而在意外发生的时候可以从最近的一个commit开始
5.查看历史操作：可以使用git log来显示提交的种种日志，如果觉得看不清的话可以加个参数
 在这一步可以注意到每一步都有他们的编号比如 第三步 GPL 14c5e8（这些编号有助于版本回退）
 回退到上一个版本git reset --hard HEAD^
 回退到上一个版本git reset --hard HEAD^^
 回退到上100个版本 git reset--hard HEAD~100
 在回退完成后在想回去就得用刚才记录的编码了 git reset--hard 14c5e8即可完成
 如果忘记编号都有什么就用git reflog


                                    CASE 5 工作区和暂存区
1.工作区可以理解为电脑内看到的目录而版本库就是工作区中隐藏的那个.git文件，这不是工作区而是版本库
2.版本库隐藏了很多东西，最重要的是stage暂存区和Git创建的第一个分支master以及指向master的HEAD指针
3.我们之前所了解的git add把文件添加进去，实际上就是把文件修改添加至暂存区。
4.git commit提交更改实际上就是把暂存区的所有内容都提交到当前分支。
5.因为我们之前在创建版本库的时候，Git自动为我们创建了master分支，我们在之后进行的commit操作其实是往mater分支提交
6.在add和commit完成之后再用git status查看工作区应该是干净的

                                    CASE 6 管理修改
Git跟踪并管理的是修改而并非文件，每次修改，如果不用git add到暂存区，那就不会加入到commit中。
比较工作区和版本库的区别 git diff HEAD -- readme.txt

                                    CASE 7 撤销修改
一.小总结
1.在vscode里修改txt并保存实质上是工作区变化
2.进行git add放才对版本库里的stage的暂存区改变
3.再次进行commit才算提交完毕

二.撤销三个场景
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

                                    CASE 8 删除文件
1.先用vscode创建一个test.txt文件
2.用add+commit进行提交
3.输入rm test.txt 删除该文件并且可以通过输入git status查看哪些文件被删除了

现在面临的是两种情况
1.第一种是确实要从版本库删除该文件就用git rm test.txt,然后再用git commit -m "remote test.txt"提交，彻底从版本库删除
2.第二种是重新建立一个test.txt执行上述123之后这种情况是假设删除错误，但是还可以从版本库里重新找到，执行git checkout --test.txt即可找回

                                    CASE 9 远程仓库
一.远程仓库建立
1.本质上是找一台电脑充当个服务器，每天保持24小时开机，每个人从服务器仓库克隆一份到自己的电脑上，也可以吧各自的提交到仓库当中
或者从仓库中拉取别人的提交。
二.添加远程仓库
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作
三.从远程库克隆
首先登录Github创建一个仓库：gitskills。并勾选readme的选项（此时github已经自动为我们创建了readme.md的文件）
接下来克隆到本地库使用$ git clone git@github.com:michaelliao/gitskills.git
之后可以用cd gitskills和ls进入gitskills的目录查看。这时候再去本地仓查看就可以看到多了个gitskills的文件夹。

                                    CASE 10 创建合并分支
一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：
每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：
在合并完成后就可以把dev删除了

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
创建+切换分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

                                    CASE 11 解决冲突
1.准备一个新的feature1分支 git switch -c feature1
2.修改readme.txt在最后一行
3.add+commit
4.将master分支上的readme.txt文件最后一行改为别的语句，这次造成了俩个分叉只能手动提交冲突
5.先进行合并 git merge feature1 然后用git status去查看冲突文件或者用cat查看
6.将《《《》》》===这些符号删除写出你想要的语句
7.再次进行add+commit
8.可以用git log查看分支并且在最后删除feature1

总的来说就是当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。

                                    CASE 12 分支管理策略
之前我们进行合并的时候Git总会采用fast forward模式但是这种模式下删掉的分支就完全没了，分支信息也没有了
解决办法就是强制禁用fast forward，这样在git merge时生成新的commit，从分支历史就可以查看分支消息。
1.创建并切换dev git switch -c dev
2.修改readme.txt 
3.add+commit
4.切回master分支 git switch master
5.no ff合并禁用fast forward git merge --no-ff -m "merge with no-ff" dev
6.合并后用git log来回看历史（显示大量的图的时候输入q可以退出）

                                    CASE 13 bug分支
有的时候在dev上的操作还没有提交但是工作进行一般无法直接进行提交可以用储藏策略
1.用git stash将工作区储藏起来
2.可以用git status查看工作区如果干净就可以放心的修复bug
3.确定在哪个分支上修复就先切换到那个分支上 并在那个分支上创造一个临时的分支101
4.在临时分支101add+commit的时候会发现在commit下面有[master 1d4b803] fix bug 101。这一串数字有用
5.修复完毕后切换到mater分支并准备删除101。记住要在合并的时候加上-no-ff才可以
6.回到工作现场之前存的可以用git stash pop 恢复并删除
7.如何更加简洁的在dev分支处理相同的bug就用git cherry-pick 1d4b803就可以了

总的来说修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令
把bug提交的修改“复制”到当前分支，避免重复劳动。

                                    CASE 14 Feature分支
再添加新功能时避免实验性的代码搞乱主分支，今后在没添加一个新功能可以新建一个feature分支在开发完成后合并并删除faeture分支
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

                                    CASE 15 多人协作
从远程仓库克隆时，Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
要查看远程库的信息，用git remote。或者，用git remote -v显示更详细的信息。
推送分支，就是把该分支上的所有本地提交推送到远程库。
推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
$ git push origin master（这是在本地）
$ git push origin dev（推送dev）
1.master分支是主分支，因此要时刻与远程同步；
2.dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
3.bug分支只用于在本地修复bug，就没必要推到远程了
4.feature分支是否推到远程，取决于你是否合作在上面开发。
ps:想推送就推送不想推送也没人管你
抓取分支时大家会向master和gev上推送各自的修改，可以从github上克隆一个模拟小伙伴而用本地的当自己
但是两个提交过后想要push会失败，这个时候要先抓取下来，如果抓取也失败是因为没有设置dev和origin/dev的连接
git branch --set-upstream-to <branch-name> origin/<branch-name>
这个完成之后可以pull下来再push就可以了

                                    CASE 16 Rebase
rebase操作可以把本地未push的分叉提交历史整理成直线
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比

                                    CASE 17 创建标签

命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息
命令git tag可以查看所有标签

                                    CASE 18 操作标签
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

                                    CASE 19 忽略文件并配置别名
忽略某些文件时，需要编写.gitignore。.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理
配置别名时$ git config --global alias.st status可以使得敲入st有status的效果
每个仓库的Git配置文件都放在.git/config文件中可以查看
配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。

                                    CASE 20 sourcetree
使用SourceTree可以以图形界面操作Git，省去了敲命令的过程，对于常用的提交、分支、推送等操作来说非常方便。
SourceTree使用Git命令执行操作，出错时，仍然需要阅读Git命令返回的错误信息。